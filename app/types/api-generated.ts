/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * admin
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CategoriesListResponse,
  CategoryCreate,
  CategoryOut,
  CategoryUpdate,
  CommitImageRequest,
  CommitImageResponse,
  DefinitionCreate,
  DefinitionListResponse,
  DefinitionOutIds,
  DefinitionUpdate,
  LevelCreate,
  LevelOut,
  LevelsListResponse,
  MeaningCreate,
  MeaningOut,
  MeaningUpdate,
  MeaningsListResponse,
  QuestionTypeListResponse,
  ReadCategoriesCategoriesGetParams,
  ReadDefinitionsDefinitionsGetParams,
  ReadLevelsLevelsGetParams,
  ReadMeaningsMeaningsGetParams,
  UploadImageRequest,
  UploadImageResponse,
  UserOut
} from './api';

export const getAdmin = () => {
/**
 * @summary Read Users
 */
const readUsersUsersGet = <TData = AxiosResponse<UserOut[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,options
    );
  }

/**
 * @summary Read User
 */
const readUserCurrentUserGet = <TData = AxiosResponse<UserOut>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/current_user`,options
    );
  }

/**
 * @summary Read Category
 */
const readCategoryCategoriesCategoryIdGet = <TData = AxiosResponse<CategoryOut>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/${categoryId}`,options
    );
  }

/**
 * @summary Update Meaning Endpoint
 */
const updateMeaningEndpointCategoriesCategoryIdPatch = <TData = AxiosResponse<CategoryOut>>(
    categoryId: number,
    categoryUpdate: CategoryUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/categories/${categoryId}`,
      categoryUpdate,options
    );
  }

/**
 * @summary Delete Meaning Endpoint
 */
const deleteMeaningEndpointCategoriesCategoryIdDelete = <TData = AxiosResponse<unknown>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/categories/${categoryId}`,options
    );
  }

/**
 * @summary Add Category
 */
const addCategoryCategoriesPost = <TData = AxiosResponse<CategoryOut>>(
    categoryCreate: CategoryCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/categories`,
      categoryCreate,options
    );
  }

/**
 * @summary Read Categories
 */
const readCategoriesCategoriesGet = <TData = AxiosResponse<CategoriesListResponse>>(
    params?: ReadCategoriesCategoriesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Add Level
 */
const addLevelLevelsPost = <TData = AxiosResponse<LevelOut>>(
    levelCreate: LevelCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/levels`,
      levelCreate,options
    );
  }

/**
 * @summary Read Levels
 */
const readLevelsLevelsGet = <TData = AxiosResponse<LevelsListResponse>>(
    params?: ReadLevelsLevelsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/levels`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Delete Level Endpoint
 */
const deleteLevelEndpointLevelsLevelIdDelete = <TData = AxiosResponse<unknown>>(
    levelId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/levels/${levelId}`,options
    );
  }

/**
 * @summary Read Meanings
 */
const readMeaningsMeaningsGet = <TData = AxiosResponse<MeaningsListResponse>>(
    params?: ReadMeaningsMeaningsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/meanings`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å Meaning
 */
const addMeaningMeaningsPost = <TData = AxiosResponse<MeaningOut>>(
    meaningCreate: MeaningCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/meanings`,
      meaningCreate,options
    );
  }

/**
 * @summary Read Meaning
 */
const readMeaningMeaningsMeaningIdGet = <TData = AxiosResponse<MeaningOut>>(
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/meanings/${meaningId}`,options
    );
  }

/**
 * @summary Update Meaning Endpoint
 */
const updateMeaningEndpointMeaningsMeaningIdPatch = <TData = AxiosResponse<MeaningOut>>(
    meaningId: number,
    meaningUpdate: MeaningUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/meanings/${meaningId}`,
      meaningUpdate,options
    );
  }

/**
 * @summary Delete Meaning Endpoint
 */
const deleteMeaningEndpointMeaningsMeaningIdDelete = <TData = AxiosResponse<unknown>>(
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/meanings/${meaningId}`,options
    );
  }

/**
 * @summary Read Definitions
 */
const readDefinitionsDefinitionsGet = <TData = AxiosResponse<DefinitionListResponse>>(
    params?: ReadDefinitionsDefinitionsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/definitions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Add Definition
 */
const addDefinitionDefinitionsPost = <TData = AxiosResponse<DefinitionOutIds>>(
    definitionCreate: DefinitionCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/definitions`,
      definitionCreate,options
    );
  }

/**
 * @summary Read Definition
 */
const readDefinitionDefinitionsDefinitionIdGet = <TData = AxiosResponse<DefinitionOutIds>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/definitions/${definitionId}`,options
    );
  }

/**
 * @summary Patch Definition
 */
const patchDefinitionDefinitionsDefinitionIdPatch = <TData = AxiosResponse<DefinitionOutIds>>(
    definitionId: number,
    definitionUpdate: DefinitionUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/definitions/${definitionId}`,
      definitionUpdate,options
    );
  }

/**
 * @summary Delete Definition Endpoint
 */
const deleteDefinitionEndpointDefinitionsDefinitionIdDelete = <TData = AxiosResponse<unknown>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/definitions/${definitionId}`,options
    );
  }

/**
 * @summary Init Image Upload
 */
const initImageUploadImagesUploadInitPost = <TData = AxiosResponse<UploadImageResponse>>(
    uploadImageRequest: UploadImageRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/images/upload-init`,
      uploadImageRequest,options
    );
  }

/**
 * @summary Commit Image Upload
 */
const commitImageUploadImagesUploadCommitPost = <TData = AxiosResponse<CommitImageResponse>>(
    commitImageRequest: CommitImageRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/images/upload-commit`,
      commitImageRequest,options
    );
  }

/**
 * @summary Read Question Types
 */
const readQuestionTypesQuestionTypesGet = <TData = AxiosResponse<QuestionTypeListResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/question_types`,options
    );
  }

return {readUsersUsersGet,readUserCurrentUserGet,readCategoryCategoriesCategoryIdGet,updateMeaningEndpointCategoriesCategoryIdPatch,deleteMeaningEndpointCategoriesCategoryIdDelete,addCategoryCategoriesPost,readCategoriesCategoriesGet,addLevelLevelsPost,readLevelsLevelsGet,deleteLevelEndpointLevelsLevelIdDelete,readMeaningsMeaningsGet,addMeaningMeaningsPost,readMeaningMeaningsMeaningIdGet,updateMeaningEndpointMeaningsMeaningIdPatch,deleteMeaningEndpointMeaningsMeaningIdDelete,readDefinitionsDefinitionsGet,addDefinitionDefinitionsPost,readDefinitionDefinitionsDefinitionIdGet,patchDefinitionDefinitionsDefinitionIdPatch,deleteDefinitionEndpointDefinitionsDefinitionIdDelete,initImageUploadImagesUploadInitPost,commitImageUploadImagesUploadCommitPost,readQuestionTypesQuestionTypesGet}};
export type ReadUsersUsersGetResult = AxiosResponse<UserOut[]>
export type ReadUserCurrentUserGetResult = AxiosResponse<UserOut>
export type ReadCategoryCategoriesCategoryIdGetResult = AxiosResponse<CategoryOut>
export type UpdateMeaningEndpointCategoriesCategoryIdPatchResult = AxiosResponse<CategoryOut>
export type DeleteMeaningEndpointCategoriesCategoryIdDeleteResult = AxiosResponse<unknown>
export type AddCategoryCategoriesPostResult = AxiosResponse<CategoryOut>
export type ReadCategoriesCategoriesGetResult = AxiosResponse<CategoriesListResponse>
export type AddLevelLevelsPostResult = AxiosResponse<LevelOut>
export type ReadLevelsLevelsGetResult = AxiosResponse<LevelsListResponse>
export type DeleteLevelEndpointLevelsLevelIdDeleteResult = AxiosResponse<unknown>
export type ReadMeaningsMeaningsGetResult = AxiosResponse<MeaningsListResponse>
export type AddMeaningMeaningsPostResult = AxiosResponse<MeaningOut>
export type ReadMeaningMeaningsMeaningIdGetResult = AxiosResponse<MeaningOut>
export type UpdateMeaningEndpointMeaningsMeaningIdPatchResult = AxiosResponse<MeaningOut>
export type DeleteMeaningEndpointMeaningsMeaningIdDeleteResult = AxiosResponse<unknown>
export type ReadDefinitionsDefinitionsGetResult = AxiosResponse<DefinitionListResponse>
export type AddDefinitionDefinitionsPostResult = AxiosResponse<DefinitionOutIds>
export type ReadDefinitionDefinitionsDefinitionIdGetResult = AxiosResponse<DefinitionOutIds>
export type PatchDefinitionDefinitionsDefinitionIdPatchResult = AxiosResponse<DefinitionOutIds>
export type DeleteDefinitionEndpointDefinitionsDefinitionIdDeleteResult = AxiosResponse<unknown>
export type InitImageUploadImagesUploadInitPostResult = AxiosResponse<UploadImageResponse>
export type CommitImageUploadImagesUploadCommitPostResult = AxiosResponse<CommitImageResponse>
export type ReadQuestionTypesQuestionTypesGetResult = AxiosResponse<QuestionTypeListResponse>
