/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * admin
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CategoriesListResponse,
  CategoryCreate,
  CategoryOut,
  CategoryUpdate,
  GetIssuesIssuesGetParams,
  ImageAssetCommit,
  ImageAssetCommitOut,
  ImageAssetUpload,
  ImageAssetUploadOut,
  ImageDefinitionCreate,
  ImageDefinitionListResponse,
  ImageDefinitionOut,
  ImageDefinitionUpdate,
  IssueOut,
  IssueStatusListResponse,
  IssueUpdate,
  IssuesListResponse,
  LevelCreate,
  LevelOut,
  LevelsListResponse,
  MeaningCreate,
  MeaningOut,
  MeaningUpdate,
  MeaningsListResponse,
  QuestionTypeListResponse,
  ReadCategoriesCategoriesGetParams,
  ReadImageDefinitionsImageDefinitionsGetParams,
  ReadLevelsLevelsGetParams,
  ReadMeaningsMeaningsGetParams,
  ReadTextDefinitionsTextDefinitionsGetParams,
  ReadUsersUsersGetParams,
  TextDefinitionCreate,
  TextDefinitionListResponse,
  TextDefinitionOutIds,
  TextDefinitionUpdate,
  UserOut,
  UsersListResponse
} from './api';

export const getAdmin = () => {
/**
 * @summary Read Users
 */
const readUsersUsersGet = <TData = AxiosResponse<UsersListResponse>>(
    params?: ReadUsersUsersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Read User
 */
const readUserCurrentUserGet = <TData = AxiosResponse<UserOut>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/current_user`,options
    );
  }

/**
 * @summary Read Category
 */
const readCategoryCategoriesCategoryIdGet = <TData = AxiosResponse<CategoryOut>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/${categoryId}`,options
    );
  }

/**
 * @summary Update Category Endpoint
 */
const updateCategoryEndpointCategoriesCategoryIdPatch = <TData = AxiosResponse<CategoryOut>>(
    categoryId: number,
    categoryUpdate: CategoryUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/categories/${categoryId}`,
      categoryUpdate,options
    );
  }

/**
 * @summary Delete Category Endpoint
 */
const deleteCategoryEndpointCategoriesCategoryIdDelete = <TData = AxiosResponse<unknown>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/categories/${categoryId}`,options
    );
  }

/**
 * @summary Add Category
 */
const addCategoryCategoriesPost = <TData = AxiosResponse<CategoryOut>>(
    categoryCreate: CategoryCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/categories`,
      categoryCreate,options
    );
  }

/**
 * @summary Read Categories
 */
const readCategoriesCategoriesGet = <TData = AxiosResponse<CategoriesListResponse>>(
    params?: ReadCategoriesCategoriesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Add Level
 */
const addLevelLevelsPost = <TData = AxiosResponse<LevelOut>>(
    levelCreate: LevelCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/levels`,
      levelCreate,options
    );
  }

/**
 * @summary Read Levels
 */
const readLevelsLevelsGet = <TData = AxiosResponse<LevelsListResponse>>(
    params?: ReadLevelsLevelsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/levels`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Delete Level Endpoint
 */
const deleteLevelEndpointLevelsLevelIdDelete = <TData = AxiosResponse<unknown>>(
    levelId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/levels/${levelId}`,options
    );
  }

/**
 * @summary Read Meanings
 */
const readMeaningsMeaningsGet = <TData = AxiosResponse<MeaningsListResponse>>(
    params?: ReadMeaningsMeaningsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/meanings`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å Meaning
 */
const addMeaningMeaningsPost = <TData = AxiosResponse<MeaningOut>>(
    meaningCreate: MeaningCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/meanings`,
      meaningCreate,options
    );
  }

/**
 * @summary Read Meaning
 */
const readMeaningMeaningsMeaningIdGet = <TData = AxiosResponse<MeaningOut>>(
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/meanings/${meaningId}`,options
    );
  }

/**
 * @summary Update Meaning Endpoint
 */
const updateMeaningEndpointMeaningsMeaningIdPatch = <TData = AxiosResponse<MeaningOut>>(
    meaningId: number,
    meaningUpdate: MeaningUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/meanings/${meaningId}`,
      meaningUpdate,options
    );
  }

/**
 * @summary Delete Meaning Endpoint
 */
const deleteMeaningEndpointMeaningsMeaningIdDelete = <TData = AxiosResponse<unknown>>(
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/meanings/${meaningId}`,options
    );
  }

/**
 * @summary Generate Audio
 */
const generateAudioMeaningsMeaningIdGenerateAudioPost = <TData = AxiosResponse<MeaningOut>>(
    meaningId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/meanings/${meaningId}/generate_audio`,undefined,options
    );
  }

/**
 * @summary Read Text Definitions
 */
const readTextDefinitionsTextDefinitionsGet = <TData = AxiosResponse<TextDefinitionListResponse>>(
    params?: ReadTextDefinitionsTextDefinitionsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/text_definitions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Add Text Definition
 */
const addTextDefinitionTextDefinitionsPost = <TData = AxiosResponse<TextDefinitionOutIds>>(
    textDefinitionCreate: TextDefinitionCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/text_definitions`,
      textDefinitionCreate,options
    );
  }

/**
 * @summary Read Text Definition
 */
const readTextDefinitionTextDefinitionsDefinitionIdGet = <TData = AxiosResponse<TextDefinitionOutIds>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/text_definitions/${definitionId}`,options
    );
  }

/**
 * @summary Patch Text Definition
 */
const patchTextDefinitionTextDefinitionsDefinitionIdPatch = <TData = AxiosResponse<TextDefinitionOutIds>>(
    definitionId: number,
    textDefinitionUpdate: TextDefinitionUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/text_definitions/${definitionId}`,
      textDefinitionUpdate,options
    );
  }

/**
 * @summary Delete Text Definition
 */
const deleteTextDefinitionTextDefinitionsDefinitionIdDelete = <TData = AxiosResponse<unknown>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/text_definitions/${definitionId}`,options
    );
  }

/**
 * @summary Generate Audio
 */
const generateAudioTextDefinitionsDefinitionIdGenerateAudioPost = <TData = AxiosResponse<TextDefinitionOutIds>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/text_definitions/${definitionId}/generate_audio`,undefined,options
    );
  }

/**
 * @summary Read Image Definitions
 */
const readImageDefinitionsImageDefinitionsGet = <TData = AxiosResponse<ImageDefinitionListResponse>>(
    params?: ReadImageDefinitionsImageDefinitionsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/image_definitions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Add Image Definition
 */
const addImageDefinitionImageDefinitionsPost = <TData = AxiosResponse<ImageDefinitionOut>>(
    imageDefinitionCreate: ImageDefinitionCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/image_definitions`,
      imageDefinitionCreate,options
    );
  }

/**
 * @summary Read Image Definition
 */
const readImageDefinitionImageDefinitionsDefinitionIdGet = <TData = AxiosResponse<ImageDefinitionOut>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/image_definitions/${definitionId}`,options
    );
  }

/**
 * @summary Patch Image Definition
 */
const patchImageDefinitionImageDefinitionsDefinitionIdPatch = <TData = AxiosResponse<ImageDefinitionOut>>(
    definitionId: number,
    imageDefinitionUpdate: ImageDefinitionUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/image_definitions/${definitionId}`,
      imageDefinitionUpdate,options
    );
  }

/**
 * @summary Delete Image Definition
 */
const deleteImageDefinitionImageDefinitionsDefinitionIdDelete = <TData = AxiosResponse<unknown>>(
    definitionId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/image_definitions/${definitionId}`,options
    );
  }

/**
 * @summary Init Image Upload
 */
const initImageUploadImagesUploadInitPost = <TData = AxiosResponse<ImageAssetUploadOut>>(
    imageAssetUpload: ImageAssetUpload, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/images/upload-init`,
      imageAssetUpload,options
    );
  }

/**
 * @summary Commit Image Upload
 */
const commitImageUploadImagesUploadCommitPost = <TData = AxiosResponse<ImageAssetCommitOut>>(
    imageAssetCommit: ImageAssetCommit, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/images/upload-commit`,
      imageAssetCommit,options
    );
  }

/**
 * @summary Read Question Types
 */
const readQuestionTypesQuestionTypesGet = <TData = AxiosResponse<QuestionTypeListResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/question_types`,options
    );
  }

/**
 * @summary Get Issue
 */
const getIssueIssuesIssueIdGet = <TData = AxiosResponse<IssueOut>>(
    issueId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/issues/${issueId}`,options
    );
  }

/**
 * @summary Update Issue
 */
const updateIssueIssuesIssueIdPatch = <TData = AxiosResponse<IssueOut>>(
    issueId: number,
    issueUpdate: IssueUpdate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/issues/${issueId}`,
      issueUpdate,options
    );
  }

/**
 * @summary Get Issues
 */
const getIssuesIssuesGet = <TData = AxiosResponse<IssuesListResponse>>(
    params?: GetIssuesIssuesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/issues`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get Issue Statuses
 */
const getIssueStatusesIssueStatusesGet = <TData = AxiosResponse<IssueStatusListResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/issue_statuses`,options
    );
  }

return {readUsersUsersGet,readUserCurrentUserGet,readCategoryCategoriesCategoryIdGet,updateCategoryEndpointCategoriesCategoryIdPatch,deleteCategoryEndpointCategoriesCategoryIdDelete,addCategoryCategoriesPost,readCategoriesCategoriesGet,addLevelLevelsPost,readLevelsLevelsGet,deleteLevelEndpointLevelsLevelIdDelete,readMeaningsMeaningsGet,addMeaningMeaningsPost,readMeaningMeaningsMeaningIdGet,updateMeaningEndpointMeaningsMeaningIdPatch,deleteMeaningEndpointMeaningsMeaningIdDelete,generateAudioMeaningsMeaningIdGenerateAudioPost,readTextDefinitionsTextDefinitionsGet,addTextDefinitionTextDefinitionsPost,readTextDefinitionTextDefinitionsDefinitionIdGet,patchTextDefinitionTextDefinitionsDefinitionIdPatch,deleteTextDefinitionTextDefinitionsDefinitionIdDelete,generateAudioTextDefinitionsDefinitionIdGenerateAudioPost,readImageDefinitionsImageDefinitionsGet,addImageDefinitionImageDefinitionsPost,readImageDefinitionImageDefinitionsDefinitionIdGet,patchImageDefinitionImageDefinitionsDefinitionIdPatch,deleteImageDefinitionImageDefinitionsDefinitionIdDelete,initImageUploadImagesUploadInitPost,commitImageUploadImagesUploadCommitPost,readQuestionTypesQuestionTypesGet,getIssueIssuesIssueIdGet,updateIssueIssuesIssueIdPatch,getIssuesIssuesGet,getIssueStatusesIssueStatusesGet}};
export type ReadUsersUsersGetResult = AxiosResponse<UsersListResponse>
export type ReadUserCurrentUserGetResult = AxiosResponse<UserOut>
export type ReadCategoryCategoriesCategoryIdGetResult = AxiosResponse<CategoryOut>
export type UpdateCategoryEndpointCategoriesCategoryIdPatchResult = AxiosResponse<CategoryOut>
export type DeleteCategoryEndpointCategoriesCategoryIdDeleteResult = AxiosResponse<unknown>
export type AddCategoryCategoriesPostResult = AxiosResponse<CategoryOut>
export type ReadCategoriesCategoriesGetResult = AxiosResponse<CategoriesListResponse>
export type AddLevelLevelsPostResult = AxiosResponse<LevelOut>
export type ReadLevelsLevelsGetResult = AxiosResponse<LevelsListResponse>
export type DeleteLevelEndpointLevelsLevelIdDeleteResult = AxiosResponse<unknown>
export type ReadMeaningsMeaningsGetResult = AxiosResponse<MeaningsListResponse>
export type AddMeaningMeaningsPostResult = AxiosResponse<MeaningOut>
export type ReadMeaningMeaningsMeaningIdGetResult = AxiosResponse<MeaningOut>
export type UpdateMeaningEndpointMeaningsMeaningIdPatchResult = AxiosResponse<MeaningOut>
export type DeleteMeaningEndpointMeaningsMeaningIdDeleteResult = AxiosResponse<unknown>
export type GenerateAudioMeaningsMeaningIdGenerateAudioPostResult = AxiosResponse<MeaningOut>
export type ReadTextDefinitionsTextDefinitionsGetResult = AxiosResponse<TextDefinitionListResponse>
export type AddTextDefinitionTextDefinitionsPostResult = AxiosResponse<TextDefinitionOutIds>
export type ReadTextDefinitionTextDefinitionsDefinitionIdGetResult = AxiosResponse<TextDefinitionOutIds>
export type PatchTextDefinitionTextDefinitionsDefinitionIdPatchResult = AxiosResponse<TextDefinitionOutIds>
export type DeleteTextDefinitionTextDefinitionsDefinitionIdDeleteResult = AxiosResponse<unknown>
export type GenerateAudioTextDefinitionsDefinitionIdGenerateAudioPostResult = AxiosResponse<TextDefinitionOutIds>
export type ReadImageDefinitionsImageDefinitionsGetResult = AxiosResponse<ImageDefinitionListResponse>
export type AddImageDefinitionImageDefinitionsPostResult = AxiosResponse<ImageDefinitionOut>
export type ReadImageDefinitionImageDefinitionsDefinitionIdGetResult = AxiosResponse<ImageDefinitionOut>
export type PatchImageDefinitionImageDefinitionsDefinitionIdPatchResult = AxiosResponse<ImageDefinitionOut>
export type DeleteImageDefinitionImageDefinitionsDefinitionIdDeleteResult = AxiosResponse<unknown>
export type InitImageUploadImagesUploadInitPostResult = AxiosResponse<ImageAssetUploadOut>
export type CommitImageUploadImagesUploadCommitPostResult = AxiosResponse<ImageAssetCommitOut>
export type ReadQuestionTypesQuestionTypesGetResult = AxiosResponse<QuestionTypeListResponse>
export type GetIssueIssuesIssueIdGetResult = AxiosResponse<IssueOut>
export type UpdateIssueIssuesIssueIdPatchResult = AxiosResponse<IssueOut>
export type GetIssuesIssuesGetResult = AxiosResponse<IssuesListResponse>
export type GetIssueStatusesIssueStatusesGetResult = AxiosResponse<IssueStatusListResponse>
